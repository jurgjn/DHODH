
import itertools, subprocess, pandas as pd, numpy as np, matplotlib.pyplot as plt, seaborn as sns, openbabel, openbabel.pybel, scipy, scipy.stats, openbabel.pybel

from modules import *

rule rdconf:
    input:
        smi = 'results/smiles/{compounds_id}.smi',
    output:
        sdf = 'results/rdconf/{compounds_id}.sdf',
    conda: 'rdconf-env'
    shell: """
        python software/rdkit-scripts/rdconf.py --maxconfs 1 {input.smi} {output.sdf}
    """

# https://doi.org/10.1038/s41598-021-91069-7
# https://onlinelibrary.wiley.com/doi/full/10.1002/jhet.3644
# https://www.nature.com/articles/s41598-022-23006-1
# https://www.sciencedirect.com/science/article/pii/S0022286020310176
# https://www.mdpi.com/1420-3049/27/12/3660
pdb_lig = {
    '1d3g': 'BRE',
    '1d3h': 'A26',
    '4igh': '1EA',
    '6gk0': 'F1W',
    '6j3c': 'B5X',
    '5zf4': '9BL',
    '3g0u': 'MDY',
    '4oqv': '2V6',
    '3u2o': '03U',
    '6oc0': 'M4J',
}

localrules: pdb

rule pdb:
    output:
        'results/pdb/{struct_id}.pdb',
        temp('results/pdb/{struct_id}_fetch.pdb'),
        temp('results/pdb/{struct_id}_pdbfixer.pdb'),
        temp('results/pdb/{struct_id}_pdbfixer_aligned.pdb'),
    params:
        delres = 'SO4,GOL,CL,ACY,ACT,LDA,ZWI,DDQ,NA,DOR',
        lig = lambda wc: pdb_lig[wc.struct_id],
        ref = 'resources/alphafill/AF-Q02127-F1-model_v2-FMN.pdb'
    shell: """
        pdb_fetch -biounit {wildcards.struct_id} | pdb_delresname -HOH > results/pdb/{wildcards.struct_id}_fetch.pdb
        pdbfixer results/pdb/{wildcards.struct_id}_fetch.pdb --add-residues --add-atoms=heavy --output=results/pdb/{wildcards.struct_id}_pdbfixer.pdb
        cd results/pdb
        prody align ../../{params.ref} {wildcards.struct_id}_pdbfixer.pdb
        cd ../..
        pdb_delresname -{params.delres},{params.lig},ORO results/pdb/{wildcards.struct_id}_pdbfixer_aligned.pdb > results/pdb/{wildcards.struct_id}.pdb
        pdb_selresname -{params.lig} results/pdb/{wildcards.struct_id}_pdbfixer_aligned.pdb > results/pdb/{wildcards.struct_id}_lig.pdb
    """

rule smina:
    input:
        sdf = 'results/rdconf/{library_id}.sdf',
        pdb = 'results/pdb/{struct_id}.pdb',
    output:
        sdf = 'results/smina/{library_id}+{struct_id}.sdf',
    threads: 8
    shell: """
        software/gnina-1.1/gnina --cpu {threads}\
            --ligand {input.sdf}\
            --receptor {input.pdb}\
            --autobox_ligand results/pdb/1d3g,1d3h,4igh,6j3c_lig.pdb\
            --out {output.sdf}\
            --exhaustiveness 16\
            --seed 4\
            --cnn_scoring none
    """

library_id = [
    'dude_actives',
    'dude_decoys_a',
    'dude_decoys_b',
    'dude_decoys_c',
    'dude_decoys_d',
    'dude_decoys_e',
    'dude_decoys_f',
    'dude_decoys_g',
    'dude_decoys_h',
    'dude_decoys_i',
    'dude_decoys_j',
    'prestwick_a',
    'prestwick_b',
    'prestwick_c',
]

struct_id=['1d3g', '1d3h', '4igh', '6j3c']

rule DiffDockOut:
    input:
        csv = 'results/DiffDockCsv/{library_id}+{struct_id}.csv',
    output:
        dir = directory('results/DiffDockOut/{library_id}+{struct_id}'),
    params:
        workdir = '/cluster/project/beltrao/jjaenes/23.03_DHODH',
        diffdock_dir = '/cluster/work/beltrao/jjaenes/24.06.10_af2genomics/software/DiffDock',
        gnina_path = '/cluster/work/beltrao/jjaenes/24.06.10_af2genomics/software/gnina-1.1/gnina',
    envmodules:
        'stack/2024-05',
        'gcc/13.2.0',
        'cuda/12.2.1',
    singularity:
        'software/DiffDock/DiffDock.sif'
    shell: """
        eval "$(micromamba shell hook --shell bash)"
        micromamba activate diffdock
        cd {params.diffdock_dir}
        python -m inference --config default_inference_args.yaml --protein_ligand_csv={params.workdir}/{input.csv} --out_dir {params.workdir}/{output.dir} \
            --gnina_minimize \
            --gnina_path {params.gnina_path} \
            --gnina_log_file {params.workdir}/{output.dir}/gnina_log.txt
    """

rule DiffDockRescore:
    input:
        csv = 'results/DiffDockCsv/{library_id}+{struct_id}.csv',
        dir = 'results/DiffDockOut/{library_id}+{struct_id}',
    output:
        dir = directory('results/DiffDockRescore/{library_id}+{struct_id}'),
        tsv = 'results/DiffDockRescore/{library_id}+{struct_id}.tsv',
    run:
        df_csv_ = pd.read_csv(input.csv, sep=',')
        gw_ = glob_wildcards('results/DiffDockOut/%s+%s/{complex_name}/rank1_confidence{diffdock_confidence_score}.sdf' % (wildcards.library_id, wildcards.struct_id))
        df_out_ = pd.DataFrame.from_dict(gw_._asdict()).astype({'diffdock_confidence_score': float})
        df_ = df_csv_.merge(df_out_, on='complex_name', how='left').sort_values('diffdock_confidence_score', ascending=False)

        snakemake.utils.makedirs(output.dir)
        #df_['receptor'] = df_['complex_name'].map(lambda complex_name: f'results/DiffDockOut/{wildcards.vscreen_id}/{complex_name}/{complex_name}_esmfold.pdb')
        df_['receptor'] = df_['protein_path']
        df_['ligand'] = df_['complex_name'].map(lambda complex_name: f'results/DiffDockOut/{wildcards.library_id}+{wildcards.struct_id}/{complex_name}/rank1.sdf')
        df_['gnina_sdf'] = df_['complex_name'].map(lambda complex_name: f'results/DiffDockRescore/{wildcards.library_id}+{wildcards.struct_id}/{complex_name}_gnina.sdf')

        def rescore_(r):
            if os.path.isfile(r.ligand) and os.path.isfile(r.receptor):
                shell(f'software/gnina-1.1/gnina --minimize --receptor "{r.receptor}" --ligand "{r.ligand}" --out "{r.gnina_sdf}"', text=True, shell=True, capture_output=True)
                top_ = read_gnina(r.gnina_sdf).head(1).squeeze()
                return -top_.minimizedAffinity, top_.CNNscore, top_.CNNaffinity, top_.CNN_VS
            else:
                return float('NaN'), float('NaN'), float('NaN'), float('NaN')

        df_[['minimizedAffinity', 'CNNscore', 'CNNaffinity', 'CNN_VS']] = df_.apply(rescore_, axis=1, result_type='expand')
        df_.to_csv(output.tsv, sep='\t', index=False, header=True)

rule all:
    input:
        #expand('results/rdconf/{library_id}.sdf', library_id=library_id),
        expand('results/smina/{library_id}+{struct_id}.sdf', library_id=library_id, struct_id=struct_id),
        #expand('results/DiffDockOut/{library_id}+{struct_id}', library_id=library_id, struct_id=struct_id),
        expand('results/DiffDockRescore/{library_id}+{struct_id}.tsv', library_id=library_id, struct_id=struct_id),
